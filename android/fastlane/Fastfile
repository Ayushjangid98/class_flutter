# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
default_platform(:android)
platform :android do
   before_all do
   # Add SLACK_URL & make it accessible to all lanes
   ENV["SLACK_URL"]
  end
#    def increment_version_code
#       path = '../app/build.gradle'
#       re = /versionCode\s+(\d+)/
#
#       s = File.read(path)
#       versionCode = s[re, 1].to_i
#       s[re, 1] = (versionCode + 1).to_s
#
#       f = File.new(path, 'w')
#       f.write(s)
#       f.close
#     end
#
#     def increment_version_number(bump_type: nil, version_number: nil)
#       path = '../app/build.gradle'
#       re = /versionName\s+("\d+.\d+.\d+")/
#       s = File.read(path)
#       versionName = s[re, 1].gsub!('"', '').split('.')
#
#       major = versionName[0].to_i
#       minor = versionName[1].to_i
#       patch = versionName[2].to_i
#
#       if bump_type == 'major'
#         major += 1
#         minor = 0
#         patch = 0
#       elsif bump_type == 'minor'
#         minor += 1
#         patch = 0
#       elsif bump_type == 'patch'
#         patch += 1
#       end
#
#       s[re, 1] = if version_number
#                    "\"#{version_number}\""
#                  else
#                    "\"#{major}.#{minor}.#{patch}\""
#                  end
#
#       f = File.new(path, 'w')
#       f.write(s)
#       f.close
#       increment_version_code
#     end
#
#     def updateVersion(options)
#       version = options[:version] || prompt(text: "Enter the version type or specific version\n(major, minor, patch or 1.0.0): ")
#
#       re = /\d+.\d+.\d+/
#       versionNum = version[re, 0]
#
#       if versionNum
#         increment_version_number(
#           version_number: versionNum
#         )
#       elsif %w[major minor patch].include?(version)
#         increment_version_number(
#           bump_type: version
#         )
#       else
#         UI.user_error!('[ERROR] Wrong version!!!!!!')
#       end
#     end
#
#     desc 'Update version'
#     lane :version do |options|
#       updateVersion(options)
#     end
desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
 end
desc 'Submit a new Internal Testing Beta'
    lane :deployInternal do |_options|
         versionNumberArrayLength = google_play_track_version_codes(track:'production')
         versionNumber = (versionNumberArrayLength.length > 0 ? versionNumberArrayLength[0] : 0).to_i + 1
         setVersionNumber versionNumber: versionNumber
         updateVersionName
      gradle(task: 'clean bundleRelease')
      upload_to_play_store(
        skip_upload_metadata: true,
        skip_upload_screenshots: true,
        skip_upload_images: true,
        skip_upload_apk: true,
        track: 'internal',
        aab: ENV["AAB_FILE_PATH"]
      )
     end
desc 'Submit a new Open Testing Beta'
    lane :deployBeta do |_options|
     versionNumberArrayLength = google_play_track_version_codes(track:'beta')
     versionNumber = (versionNumberArrayLength.length > 0 ? versionNumberArrayLength[0] : 0).to_i + 1
     setVersionNumber versionNumber: versionNumber
     updateVersionName
     gradle(task: 'clean bundleRelease')
     path = lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
     UI.success("[ERROR] Apk Generated  #{path}!!!!!!")
     upload_to_play_store(
        skip_upload_metadata: true,
        skip_upload_screenshots: true,
        skip_upload_images: true,
        skip_upload_apk: true,
        track: 'beta',
        aab: ENV["AAB_FILE_PATH"]
      )
      slack(message: ":rocket: * #{ENV['APP_NAME']} Beta play store upload Successful!* :rocket:")
     end
desc 'Deploy a new version to the Google Play'
    lane :deployRelease do |_options|
     versionNumberArrayLength = google_play_track_version_codes(track:'production')
     versionNumber = (versionNumberArrayLength.length > 0 ? versionNumberArrayLength[0] : 0).to_i + 1
     setVersionNumber versionNumber: versionNumber
     updateVersionName
     gradle(task: 'clean bundleRelease')
     path = lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
     UI.success("[ERROR] Apk Generated  #{path}!!!!!!")
     upload_to_play_store(
        skip_upload_metadata: true,
        skip_upload_screenshots: true,
        skip_upload_images: true,
        skip_upload_apk: true,
        track: 'production',
        aab: ENV["AAB_FILE_PATH"]
      )
     slack(message: ":rocket: * #{ENV['APP_NAME']} Release Version play store upload Successful!* :rocket:")
end
desc "build bundle"
    lane :bundle do |options|
        versionNumberArrayLength = [2]#google_play_track_version_codes(track:'beta')
        versionNumber = (versionNumberArrayLength.length > 0 ? versionNumberArrayLength[0] : 0).to_i + 1
        setVersionNumber versionNumber: versionNumber
        updateVersionName
        task = gradle(task: 'clean bundleRelease')
        path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
        UI.success("[ERROR] Apk Generated  #{path}!!!!!!")
        slack(message: ":rocket: * #{ENV['APP_NAME']} Build Successful!* :rocket:")
end
desc "build apk"
    lane :betaApk do |options|
        versionNumberArrayLength = [1] #google_play_track_version_codes(track:'production')
        versionNumber = (versionNumberArrayLength.length > 0 ? versionNumberArrayLength[0] : 0).to_i + 1
        setVersionNumber versionNumber: versionNumber
        updateVersionName
        task = gradle(task: 'clean assembleRelease')
        path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
        UI.success("[ERROR] Apk Generated  #{path}!!!!!!")
        slack(message: ":rocket: * #{ENV['APP_NAME']} Build Successful!* :rocket:")
end
desc "build apk"
    lane :betaApkToSlack do |options|
        versionNumberArrayLength = [1] #google_play_track_version_codes(track:'beta')
        versionNumber = (versionNumberArrayLength.length > 0 ? versionNumberArrayLength[0] : 0).to_i + 1
        setVersionNumber versionNumber: versionNumber
        versionName = updateVersionName
        gradle(task: 'clean assembleRelease')
        path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
        UI.success("[SUCCESS] Apk Generated  #{path}!!!!!!")
        upload_file_to_slack(versionName:versionName,versionNumber:versionNumber)
        UI.success("[SUCCESS] APK Uploaded to slack #{ENV['CHANNEL_NAME']}!!!!!!")
        slack(message: ":rocket: * #{ENV['APP_NAME']} Slack Upload Successful!* :rocket:")
end
desc "Upload APK to Slack channel"
  private_lane :upload_file_to_slack do |options|
    file_path = "#{ENV["APK_FILE_PATH"]}#{options[:versionName]}c#{options[:versionNumber]}.apk"
    sh "echo Uploading " + file_path + " to Slack"
    file_name = file_path.gsub(/\/.*\//,"")
    access_token = ENV["ACCESS_TOKEN"]
    channel_name = ENV["CHANNEL_NAME"]
    sh "echo Uploading " + file_path + " to Slack"
    sh "curl https://slack.com/api/files.upload -F token=\"" + access_token + "\" -F channels=\"" + channel_name + "\" -F title=\"" + file_name + "\" -F filename=\"" + file_name + "\" -F file=@" + file_path
end
desc "version code from play store"
private_lane :setVersionNumber do |options|
    if options[:versionNumber] != nil
    set_properties_value(
         key: 'flutter.versionCode',
         path: './local.properties',
         value: options[:versionNumber])
    else
     set_properties_value(
            key: 'flutter.versionCode',
            path: './local.properties',
            value: '1')
    end
end
desc "version name update"
private_lane :updateVersionName do |options|
    currentVersion = get_properties_value(
      key: "flutter.versionName",
      path: "./local.properties"
    )
    version = options[:version] || prompt(text: "Enter the version type or specific version or use current(#{currentVersion})\n(major, minor, patch or 1.0.0 or current): ")
    re = /\d+.\d+.\d+/
    typedVersion = version[re, 0]
    if typedVersion
     name =  setVersionName(version_name: typedVersion)
    elsif %w[major minor patch].include?(version)
     name = setVersionName(version_name: currentVersion, bump_type: version)
    elsif %w[current].include?(version)
     name = setVersionName(version_name: currentVersion)
    else
      UI.user_error!('[ERROR] Wrong version!!!!!!')
    end
end
desc "version name set"
def  setVersionName(bump_type: nil, version_name: nil)
version = version_name.split('.')
    if version != nil
    major = version[0].to_i
    minor = version[1].to_i
    patch = version[2].to_i
        if bump_type == 'major'
          major += 1
          minor = 0
          patch = 0
        elsif bump_type == 'minor'
          minor += 1
          patch = 0
        elsif bump_type == 'patch'
          patch += 1
        end
        v = "#{major}.#{minor}.#{patch}"
        if v != nil
         set_properties_value(
           key: 'flutter.versionName',
           path: './local.properties',
           value: v
         )
        else
         UI.user_error!('[ERROR] Updating local properties version name failed!!!!!!')
        end
        return v
    else
    UI.user_error!('[ERROR] No version name found!!!!!!')
    end
end
# Runs after all tasks. This block is called only when the executed lane is successful
  after_all do |lane|
    # Slack action
    # slack(message: ":rocket: Successful Deployment! :rocket:")
  end
  error do |lane, exception|
#     slack(
#       message: exception.message,
#       success: false
#       )
  end
end